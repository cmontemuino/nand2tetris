// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        Mux16(a=x, b[0..15]=false, sel=zx, out=zxStep);
        Not16(in=zxStep, out=notX);
        Mux16(a=zxStep, b=notX, sel=nx, out=nxStep);
        Mux16(a=y, b[0..15]=false, sel=zy, out=zyStep);
        Not16(in=zyStep, out=notY);
        Mux16(a=zyStep, b=notY, sel=ny, out=nyStep);
        Add16(a=nxStep, b=nyStep, out=xPlusY);
        And16(a=nxStep, b=nyStep, out=xAndY);
        Mux16(a=xAndY, b=xPlusY, sel=f, out=fStep);
        Not16(in=fStep , out=notFStep);
        // To compute `ng`, we only need to inspect if the most significant bit is 1. That's the indication for negative numbers in module-2 representation.
        // To compute `zr`, we need to manipulate all bits in the `out` variable to check if each one of them is zero.
        // As we don't have a `Or16Way`, thus the idea is to split the `out` variable in halves, use the `Or8Way`
        // chip, and then `Or` the results. If there's a single 1 bit in each of the halves, the output from
        // the `Or` chip will be `1`; otherwise it will be `0`.
        // According to the given formula, it remains is to negate the result.
        Mux16(a=fStep, b=notFStep, sel=no, out=out, out[15]=ng, out[8..15]=high8, out[0..7]=low8);
        Or8Way(in=low8, out=orLow8);
        Or8Way(in=high8, out=orHigh8);
        Or(a=orLow8 , b=orHigh8 , out=orOutBits);
        Not(in=orOutBits, out=zr);

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/b/RAM512.hdl
/**
 * Memory of 512 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
        /**
         * This chip is much like RAM64. In that case, the idea was to use the three least significant
         * bits from `address` to select a register in a RAM8 chip.
         * Then, the three most significant bits points to a specific RAM8 chip.
         * The only different between now and then is that we have a RAM64, which contains 64 registers.
         * Thus, we need log(64)=6 bits to reference a register in such chip.
         * As long as we build chips with an 8x factor, then this process can go on an on in a very
         * trivial way.
         * What if we use a different factor? If factor is 4x, then all good. Otherwise, we need to
         * impleent extra `DMuxYWay` and `MuxYWay16`, being `Y` the factor in question (e.g., 10).
         */
        DMux8Way(in=load , sel=address[6..8] , a=l0, b=l1, c=l2, d=l3, e=l4, f=l5, g=l6, h=l7);
        RAM64(in=in, load=l0, address=address[0..5], out=r0);
        RAM64(in=in, load=l1, address=address[0..5], out=r1);
        RAM64(in=in, load=l2, address=address[0..5], out=r2);
        RAM64(in=in, load=l3, address=address[0..5], out=r3);
        RAM64(in=in, load=l4, address=address[0..5], out=r4);
        RAM64(in=in, load=l5, address=address[0..5], out=r5);
        RAM64(in=in, load=l6, address=address[0..5], out=r6);
        RAM64(in=in, load=l7, address=address[0..5], out=r7);
        Mux8Way16(a=r0, b=r1, c=r2, d=r3, e=r4, f=r5, g=r6, h=r7, sel=address[6..8], out=out);
}
